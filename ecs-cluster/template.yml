AWSTemplateFormatVersion: 2010-09-09
Description: ECS cluster; linked to ops-ecs-network.

Parameters:
  InstanceType:
    Type: String
    Description: The EC2 instance type to host Docker.
    Default: t2.xlarge
  EcsAMI:
    Type: String
    Description: ECS AMI to use for the launch config.
  ASGMaxSize:
    Type: Number
    Description: Max allowed size for the AutoScaling group.
    Default: 10
  ASGMinSize:
    Type: Number
    Description: Minimum allowed size for the AutoScaling group.
    Default: 3
  ASGDesiredSize:
    Type: Number
    Description: Desired capacity for the AutoScaling group.
    Default: 3

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'ecr:GetAuthorizationToken', 'ecr:BatchGetImage', 'ecr:GetDownloadUrlForLayer',
              'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
          - Effect: Allow
            Action: ['kms:*']
            Resource: '*'
          - Effect: Allow
            Action: ['dynamodb:*']
            Resource: '*'

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref EC2Role

  ECSCluster:
    Type: AWS::ECS::Cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-${AWS::Region}-log-group"
      RetentionInDays: 30

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EcsAMI
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName: ops-ecs-key
      AssociatePublicIpAddress: True
      SecurityGroups:
      - !Ref SecurityGroup
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum update -y
          yum install -y aws-cli
          yum install -y awslogs
          # set up the ECS config
          cat >> /etc/ecs/ecs.config <<EoConf
          ECS_CLUSTER=${ECSCluster}
          EoConf
          # set up the default log driver to talk to CloudWatch
          cat >> /etc/sysconfig/docker <<EoDC
          OPTIONS="\$OPTIONS --log-driver=awslogs --log-opt awslogs-region=${AWS::Region} --log-opt awslogs-group=${LogGroup}"
          EoDC
          stop ecs
          start ecs

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier: [!ImportValue ops-ecs-app-subnetids]
      MaxSize: !Ref ASGMaxSize
      MinSize: !Ref ASGMinSize
      DesiredCapacity: !Ref ASGDesiredSize
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit traffic from ALB
      VpcId: !ImportValue ops-ecs-vpcid
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 32768
        ToPort: 61000
        SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit traffic to ALB
      VpcId: !ImportValue ops-ecs-vpcid
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  MemoryReservationScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1
  
  MemoryReservationScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

  MemoryReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-MemoryReservationHighAlert
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '80'
      Period: '60'
      AlarmActions:
      - !Ref MemoryReservationScaleUpPolicy
      OKActions:
      - !Ref MemoryReservationScaleDownPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation
      Namespace: AWS/ECS

Outputs:
  OpsECSCluster:
    Value: !Ref ECSCluster
    Description: "Outputs the name of the ECS cluster"
    Export:
      Name: ops-ecs-clusterid
  OpsALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Description: "Outputs the ID of the ALB security group"
    Export:
      Name: ops-ecs-albsgid
