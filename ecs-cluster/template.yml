AWSTemplateFormatVersion: 2010-09-09
Description: ECS cluster; linked to ops-ecs-network.

Parameters:
  InstanceType:
    Type: String
    Description: The EC2 instance type to host Docker.
    Default: t2.xlarge
  EcsAMI:
    Type: String
    Description: ECS AMI to use for the launch config.
  ASGMaxSize:
    Type: Number
    Description: Max allowed size for the AutoScaling group.
    Default: 10
  ASGMinSize:
    Type: Number
    Description: Minimum allowed size for the AutoScaling group.
    Default: 3
  ASGDesiredSize:
    Type: Number
    Description: Desired capacity for the AutoScaling group.
    Default: 3
  S3BucketName:
    Type: String
    Description: >
      REQUIRED - Specifies the name of your AWS account S3 bucket in which the index.zip file is stored. index.zip contains the Python Lambda code index.py; Please download this from https://github.com/awslabs/ecs-cid-sample/tree/master/code and upload to your S3 bucket.
Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'ecr:GetAuthorizationToken', 'ecr:BatchGetImage', 'ecr:GetDownloadUrlForLayer',
              'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
          - Effect: Allow
            Action: ['kms:*']
            Resource: '*'
          - Effect: Allow
            Action: ['dynamodb:*']
            Resource: '*'

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref EC2Role

  ECSCluster:
    Type: AWS::ECS::Cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-${AWS::Region}-log-group"
      RetentionInDays: 30

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EcsAMI
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName: ops-ecs-key
      AssociatePublicIpAddress: True
      SecurityGroups:
      - !Ref SecurityGroup
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum update -y
          yum install -y aws-cli
          yum install -y awslogs
          # set up the ECS config
          cat >> /etc/ecs/ecs.config <<EoConf
          ECS_CLUSTER=${ECSCluster}
          EoConf
          # set up the default log driver to talk to CloudWatch
          cat >> /etc/sysconfig/docker <<EoDC
          OPTIONS="\$OPTIONS --log-driver=awslogs --log-opt awslogs-region=${AWS::Region} --log-opt awslogs-group=${LogGroup}"
          EoDC
          stop ecs
          start ecs

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier: [!ImportValue ops-ecs-app-subnetids]
      MaxSize: !Ref ASGMaxSize
      MinSize: !Ref ASGMinSize
      DesiredCapacity: !Ref ASGDesiredSize
      NotificationConfigurations:
      - TopicARN: !Ref ASGSNSTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit traffic from ALB
      VpcId: !ImportValue ops-ecs-vpcid
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 32768
        ToPort: 61000
        SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit traffic to ALB
      VpcId: !ImportValue ops-ecs-vpcid
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  EcsClusterScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1
  
  EcsClusterScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1

  MemoryReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-MemoryReservationHighAlert
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '80'
      Period: '60'
      AlarmActions:
      - !Ref EcsClusterScaleUpPolicy
      OKActions:
      - !Ref EcsClusterScaleDownPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation
      Namespace: AWS/ECS
  
  CpuReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-CpuReservationHighAlert
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '80'
      Period: '60'
      AlarmActions:
      - !Ref EcsClusterScaleUpPolicy
      OKActions:
      - !Ref EcsClusterScaleDownPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUReservation
      Namespace: AWS/ECS

  SNSLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        -
          PolicyName: "ops-ecs-lambda-inline"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                - autoscaling:CompleteLifecycleAction
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:DescribeInstances
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeInstanceStatus
                - ec2:DescribeHosts
                - ecs:ListContainerInstances
                - ecs:SubmitContainerStateChange
                - ecs:SubmitTaskStateChange
                - ecs:DescribeContainerInstances
                - ecs:UpdateContainerInstancesState
                - ecs:ListTasks
                - ecs:DescribeTasks
                - sns:Publish
                - sns:ListSubscriptions
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"
  
  ASGSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint:
             Fn::GetAtt:
                - "LambdaFunctionForASG"
                - "Arn"
          Protocol: "lambda"
    DependsOn: "LambdaFunctionForASG"
  
  LambdaFunctionForASG:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: "index.zip"
      Description: Lambda code for the autoscaling hook triggers invoked when autoscaling events of launching and terminating instance occur
      Handler: "index.lambda_handler"
      Role:
         Fn::GetAtt:
           - "LambdaExecutionRole"
           - "Arn"
      Runtime: "python2.7"
      Timeout: "300"

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
       FunctionName: !Ref LambdaFunctionForASG
       Action: lambda:InvokeFunction
       Principal: "sns.amazonaws.com"
       SourceArn: !Ref ASGSNSTopic

  LambdaSubscriptionToSNSTopic:
    Type: AWS::SNS::Subscription
    Properties:
       Endpoint:
          Fn::GetAtt:
             - "LambdaFunctionForASG"
             - "Arn"
       Protocol: 'lambda'
       TopicArn: !Ref ASGSNSTopic

  ASGTerminateHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: "ABANDON"
      HeartbeatTimeout: "900"
      LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
      NotificationTargetARN: !Ref ASGSNSTopic
      RoleARN:
         Fn::GetAtt:
         - "SNSLambdaRole"
         - "Arn"
    DependsOn: "ASGSNSTopic"

Outputs:
  OpsECSCluster:
    Value: !Ref ECSCluster
    Description: "Outputs the name of the ECS cluster"
    Export:
      Nameops-ecs-clusterid
  OpsALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Description: "Outputs the ID of the ALB security group"
    Export:
      Name: ops-ecs-albsgid
